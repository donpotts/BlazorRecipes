@page "/recipes"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@attribute [Authorize]

<PageTitle>Recipes</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Recipes</MudText>
</div>

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Primary" OnClick="@(e => OnAdd())">Add</MudButton>
</MudStack>

<MudDataGrid T="Recipes" @ref="grid" ServerData="(new Func<GridState<Recipes>, Task<GridData<Recipes>>>(ServerReload))" Filterable="true">
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.Name" Title="Name" />
        <PropertyColumn Property="x => x!.Source" Title="Source" />
        <PropertyColumn Property="x => x!.PrepTime" Title="PrepTime" />
        <PropertyColumn Property="x => x!.CookTime" Title="CookTime" />
        <PropertyColumn Property="x => x!.Servings" Title="Servings" />
        <PropertyColumn Property="x => x!.RecipeIngredients" Title="RecipeIngredients" />
        <PropertyColumn Property="x => x!.Comments" Title="Comments" />
        <PropertyColumn Property="x => x!.Instructions" Title="Instructions" />
        <TemplateColumn Title="Photo" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item!.Photo))
                {
                    <MudImage Src="@GetAbsoluteUri(context.Item!.Photo)" Style="width:100%;height:300px;object-fit:contain;" />
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Tags" Sortable="false" Filterable="false">
            <CellTemplate>
                @string.Join(", ", context.Item.Tags?.Select(x => x.Name?.ToString() ?? string.Empty) ?? [])
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Reviews" Sortable="false" Filterable="false">
            <CellTemplate>
                @string.Join(", ", context.Item.Reviews?.Select(x => x.Rating.ToString() ?? string.Empty) ?? [])
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" Title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Recipes" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Recipes>? grid;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<Recipes>> ServerReload(GridState<Recipes> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        AppService.ODataResult<Recipes>? result = null;

        try
        {
            result = await AppService.ListRecipesODataAsync(top, skip, orderby, filter, true, "Tags,Reviews");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Recipes>() };
    }

    private async void OnAdd()
    {
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddRecipes>("Add Recipes", dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnEdit(Recipes record)
    {
        DialogParameters<UpdateRecipes> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateRecipes>("Update Recipes", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }
    }

    private async void OnDelete(Recipes record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteRecipesAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
}
